-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company. Use a nested SELECT statement. 

	USE TelerikAcademy;
	SELECT FirstName, LastName, Salary 
	FROM Employees 
	WHERE Salary = (SELECT MIN(Salary) FROM Employees);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company. 

	USE TelerikAcademy;
	SELECT FirstName, LastName, Salary 
	FROM Employees 
	WHERE Salary < (SELECT MIN(Salary) FROM Employees)*1.1;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department. Use a nested SELECT statement. 

	USE TelerikAcademy;
	SELECT e.FirstName + ' ' + e.LastName AS [Full Name],
		e.Salary,
		d.Name AS [Department]
	FROM Employees e,
		Departments d
	WHERE e.DepartmentID = d.DepartmentID AND e.Salary = (SELECT MIN(e.Salary) 
					FROM Employees e
					WHERE e.DepartmentID = d.DepartmentID);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Write a SQL query to find the average salary in the department #1. 

	USE TelerikAcademy;
	SELECT AVG(e.Salary) AS [Average Salary]
	FROM Employees e
	WHERE e.DepartmentID = 1;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Write a SQL query to find the average salary in the "Sales" department. 

	USE TelerikAcademy;
	SELECT AVG(e.Salary) AS [Average Salary]
	FROM Employees e
	WHERE e.DepartmentID = (SELECT d.DepartmentID FROM Departments d WHERE d.Name = 'Sales' );
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. Write a SQL query to find the number of employees in the "Sales" department. 

	USE TelerikAcademy;
	SELECT COUNT(e.Salary) AS [Count Of 'Sales' Department Employees]
	FROM Employees e
	WHERE e.DepartmentID = (SELECT d.DepartmentID FROM Departments d WHERE d.Name = 'Sales' );
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. Write a SQL query to find the number of all employees that have manager.

	USE TelerikAcademy;
	SELECT COUNT(e.Salary) AS [Count of Employees with Manager]
	FROM Employees e
	WHERE e.ManagerID IS NOT NULL;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. Write a SQL query to find the number of all employees that have no manager. 

	USE TelerikAcademy;
	SELECT COUNT(e.Salary) AS [Count of Employees with Manager]
	FROM Employees e
	WHERE e.ManagerID IS NULL;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. Write a SQL query to find all departments and the average salary for each of them. 

	USE TelerikAcademy;
	SELECT d.Name AS [Deparment],
		AVG(e.Salary) AS [Average Department Salary]
	FROM Employees e
		JOIN Departments d
			ON e.DepartmentID = d.DepartmentID
			GROUP BY d.Name;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. Write a SQL query to find the count of all employees in each department and for each town. 

	USE TelerikAcademy;
	SELECT d.Name AS [Deparment],
		t.Name AS [Town],
		COUNT(*) AS [Employees Count]
	FROM Employees e
		JOIN Departments d
			ON e.DepartmentID = d.DepartmentID
		JOIN Addresses a
			ON e.AddressID = a.AddressID
		JOIN Towns t
			ON t.TownID = a.TownID
		GROUP BY d.DepartmentId, d.Name, t.TownId, t.Name;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name. 

	USE TelerikAcademy;
	SELECT m.FirstName + ' ' + m.LastName AS [Manager Full Name]
	FROM Employees e
		JOIN Employees m
			ON e.ManagerID = m.EmployeeID OR m.ManagerID IS NULL
		GROUP BY m.EmployeeID, m.FirstName, m.LastName
		HAVING COUNT(*)=5;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)". 

	USE TelerikAcademy;
	SELECT e.FirstName + ' ' + e.LastName AS [Manager Full Name],
		   ISNULL(m.FirstName + ' ' + m.LastName, '(no manager)')  AS [Manager]
	FROM Employees e
		LEFT OUTER JOIN Employees m
			ON e.ManagerID = m.EmployeeID;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in LEN(str) function. 

	USE TelerikAcademy;
	SELECT e.FirstName,
			e.LastName
	FROM Employees e
	WHERE LEN(e.LastName)=5;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14. Write a SQL query to display the current date and time in the following format "day.month.year hour:minutes:seconds:milliseconds". 
Search in Google to find how to format dates in SQL Server. 

	SELECT convert(varchar, getdate(), 104) + ' ' + convert(varchar, getdate(), 114);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15. Write a SQL statement to create a table Users. Users should have username, password, full name and last login time. Choose appropriate data types for the table fields. 
Define a primary key column with a primary key constraint. Define the primary key column as identity to facilitate inserting records. Define unique constraint to avoid repeating 
usernames. Define a check constraint to ensure the password is at least 5 characters long. 

	CREATE TABLE Users(
		[ID] int IDENTITY,
		[Username] nvarchar(50) NOT NULL UNIQUE,
		[Password] nvarchar(50) NOT NULL,
		[FullName] nvarchar(100) NOT NULL,
		[LastLogin] datetime,
		CONSTRAINT PK_Users PRIMARY KEY(ID),
		CONSTRAINT [Username] CHECK (LEN(Username)>=3),
		CONSTRAINT [Password] CHECK (LEN(Password)>=5)
	)
	
	GO
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16. Write a SQL statement to create a view that displays the users from the Users table that have been in the system today. Test if the view works correctly. 

	CREATE VIEW AllUsersFromToday AS
	SELECT *
	FROM Users u
	WHERE u.LastLogin = GETDATE()
	
	GO
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. Write a SQL statement to create a table Groups. Groups should have unique name (use unique constraint). Define primary key and identity column. 

	CREATE TABLE Groups(
		[ID] int IDENTITY,
		[Name] nvarchar(50) NOT NULL UNIQUE,
		CONSTRAINT PK_GRoups PRIMARY KEY(ID)
	)
	
	GO
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. Write a SQL statement to add a column GroupID to the table Users. Fill some data in this new column and as well in the Groups table. Write a SQL 
statement to add a foreign key constraint between tables Users and Groups tables. 

	USE TelerikAcademy;
	
	ALTER TABLE Users ADD GroupID int
	GO
	
	ALTER TABLE Users ADD CONSTRAINT FK_Users_Groups FOREIGN KEY(GroupID) REFERENCES Groups(ID)
	GO
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. Write SQL statements to insert several records in the Users and Groups tables. 

	USE TelerikAcademy;
	INSERT INTO Groups(Name)
	VALUES 
		('Vodka'),
		('Whiskey'),
		('Gin'),
		('Wine');
	
	INSERT INTO Users(Username, Password, FullName, LastLogin, GroupID)
	VALUES
		('dinko', '12345', 'Dinko Picha', GETDATE(), 1),
		('pesho1', 'pesho5', 'Pesho Picha', '2014-8-1', 3),
		('gosho737', 'gogogogo', 'Gosho Picha', '2013-5-5', 3),
		('spinderman', '12345', 'Bat Spinder', GETDATE(), 4),
		('gubi_', 'buklik', 'Gubi Buklik', GETDATE(), 6);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. Write SQL statements to update some of the records in the Users and Groups tables. 

	USE TelerikAcademy;
	UPDATE Groups
	SET Name = 'RAKIA'
	WHERE Name = 'Wine';
	
	UPDATE Users
	SET GroupID = 1
	WHERE GroupID = 3
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21. Write SQL statements to delete some of the records from the Users and Groups tables. 

	USE TelerikAcademy;
	DELETE FROM Users
	WHERE Username = 'pesho1'
	
	DELETE FROM Groups
	WHERE Name = 'Vodka'
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22. Write SQL statements to insert in the Users table the names of all employees from the Employees table. Combine the first and last names as a full name. For username use the first letter of the first name + the last name (in lowercase). Use the same for the password, and NULL for last login time. 

	USE TelerikAcademy;
	INSERT INTO Users(Username, Password, FullName)
	SELECT LOWER(LEFT(e.FirstName,1) + e.LastName),
		   LOWER(LEFT(e.FirstName,1) + e.LastName + 'pswrd'),
		   e.FirstName + ' ' + e.LastName
	FROM Employees e;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23. Write a SQL statement that changes the password to NULL for all users that have not been in the system since 10.03.2010. 

	USE TelerikAcademy;
	UPDATE Users
	SET Password = NULL 
	WHERE LastLogin < '20100310'
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24. Write a SQL statement that deletes all users without passwords (NULL password). 

	USE TelerikAcademy;
	DELETE FROM Users
	WHERE Password IS NULL
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25. Write a SQL query to display the average employee salary by department and job title.

	SELECT d.Name AS [Deparment],
			e.JobTitle AS [Job Title],
			AVG(e.Salary) AS [Average Salary]
	FROM Employees e
		JOIN Departments d
			ON e.DepartmentID = d.DepartmentID
		GROUP BY d.Name, e.JobTitle;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
26. Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it. 

	USE TelerikAcademy;
	SELECT MIN(Salary) AS [Minimal Salary],
			e.JobTitle AS [Job Title],
			d.Name AS [Department Name],
			MIN(e.FirstName + ' ' + e.LastName) AS [FULL Name]
	FROM Employees e
		INNER JOIN Departments d
			ON e.DepartmentID = d.DepartmentID
	GROUP BY d.Name, e.JobTitle
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27. Write a SQL query to display the town where maximal number of employees work. 

	USE TelerikAcademy;
	SELECT top 1 t.Name AS [Town],
			COUNT(*) AS [EmployeeCount]
	FROM Employees e
		JOIN Addresses a
			ON e.AddressID = a.AddressID
		JOIN Towns t
			ON a.TownID = t.TownID
	GROUP BY t.Name
	ORDER BY EmployeeCount DESC;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28. Write a SQL query to display the number of managers from each town. 

	USE TelerikAcademy;
	SELECT t.Name AS [Town],
			COUNT(DISTINCT(e.ManagerID))
	FROM Employees e
		JOIN Employees m
			ON e.ManagerID = m.EmployeeID OR m.ManagerID IS NULL
		JOIN Addresses a
			ON e.AddressID = a.AddressID
		JOIN Towns t
			ON a.TownID = t.TownID
		GROUP BY t.Name
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29. Write a SQL to create table WorkHours to store work reports for each employee (employee id, date, task, hours, comments). Do not forget to define identity, primary key and
appropriate foreign key. Issue few SQL statements to insert, update and delete of some data in the table. Define a table WorkHoursLogs to track all changes in the WorkHours 
table with triggers. For each change keep the old record data, the new record data and the command (insert / update / delete).
	
	USE TelerikAcademy;
	CREATE TABLE Workhours(
			[TaskID] int IDENTITY,
			[EmployeeID] int,
			[Date] datetime NOT NULL,
			[Task] nvarchar(100) NOT NULL,
			[Hours] int NOT NULL,
			[Comments] nvarchar(100),
			CONSTRAINT PK_Workhours PRIMARY KEY([TaskID]),
			CONSTRAINT [Hours] CHECK ([Hours] > 0 OR [Hours] <= 24)
		)	
	GO
	
	ALTER TABLE WorkHours  WITH CHECK ADD  CONSTRAINT [FK_WorkHours_Employees] FOREIGN KEY([EmployeeID])
	REFERENCES Employees ([EmployeeID])
	GO
	
	INSERT INTO WorkHours([EmployeeID], [Date], [Task], [Hours])
		VALUES
			(1,GETDATE(),'Boiling Rakiaa',8),
			(2,GETDATE(),'Drinking Rakia',8),
			(3,GETDATE(),'Cut Salad',8),
			(4,GETDATE(),'Go Home',8)
	
	CREATE TABLE WorkhoursLog(
		[LogID] int IDENTITY,
		[OldEmployeeID] int,
		[OldDate] datetime,
		[OldTask] nvarchar(100),
		[OldHours] int,
		[OldComments] nvarchar(100),
		[NewEmployeeID] int,
		[NewDate] datetime,
		[NewTask] nvarchar(100),
		[NewHours] int,
		[NewComments] nvarchar(100),
		[Command] nvarchar(10)
		CONSTRAINT PK_WorkhoursLog PRIMARY KEY([LogID]),
	)
	GO
	
	CREATE TRIGGER tr_workhoursInsert ON Workhours FOR INSERT
		AS 
	INSERT INTO WorkhoursLog([OldEmployeeID],[OldDate],[OldTask],[OldHours],[OldComments],
									[NewEmployeeID],[NewDate],[NewTask],[NewHours],[NewComments],[Command])
	SELECT NULL, NULL, NULL, NULL, NULL,
			i.EmployeeID, i.Date, i.Task, i.Hours,i.Comments, 'insert'
	FROM Workhours w
		INNER JOIN inserted i
			ON w.TaskID = i.TaskID;
	GO
	
	CREATE TRIGGER tr_workhoursUpdate ON Workhours FOR UPDATE
		AS
	INSERT INTO WorkhoursLog([OldEmployeeID],[OldDate],[OldTask],[OldHours],[OldComments],
									[NewEmployeeID],[NewDate],[NewTask],[NewHours],[NewComments],[Command])
	SELECT d.EmployeeID, d.Date, d.Task, d.Hours, d.Comments, 
		i.EmployeeID, i.Date, i.Task, i.Hours, i.Comments, 'update'
	FROM deleted d
		INNER JOIN inserted i
			ON d.TaskID = i.TaskID;
	GO
	
	CREATE TRIGGER tr_workhoursDelete ON Workhours FOR DELETE
		AS
	INSERT INTO WorkhoursLog([OldEmployeeID],[OldDate],[OldTask],[OldHours],[OldComments],
									[NewEmployeeID],[NewDate],[NewTask],[NewHours],[NewComments],[Command])
	SELECT d.EmployeeID, d.Date, d.Task, d.Hours, d.Comments, 
		NULL, NULL, NULL, NULL, NULL, 'delete'
	FROM deleted d
	GO
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30. Start a database transaction, delete all employees from the 'Sales' department along with all dependent records from the other tables. At the end rollback the transaction.

	USE TelerikAcademy;
	BEGIN TRAN
		DELETE FROM Employees
			SELECT d.Name
			FROM Employees e
				INNER JOIN Departments d
					ON e.DepartmentID = d.DepartmentID
			WHERE d.Name = 'Sales'
			GROUP BY d.Name
	ROLLBACK TRAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
31. Start a database transaction and drop the table EmployeesProjects. Now how you could restore back the lost table data? 

	USE TelerikAcademy;
	BEGIN TRAN
		DROP TABLE EmployeesProjects
	ROLLBACK TRAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
32. Find how to use temporary tables in SQL Server. Using temporary tables backup all records from EmployeesProjects and restore them back after dropping and re-creating the table. 

	USE TelerikAcademy;
	CREATE TABLE #TempEmployeeProjects(
		EmployeeID int,
		ProjectID int
	)
	
	INSERT INTO #TempEmployeeProjects
	SELECT ep.EmployeeID AS [EmployeeID], 
			ep.ProjectID AS [ProjectID]
	FROM EmployeesProjects ep
	
	DROP TABLE EmployeesProjects
	
	CREATE TABLE EmployeesProjects(
		EmployeeID int,
		ProjectID int
	)
	
	INSERT INTO EmployeesProjects
	SELECT tep.EmployeeID AS [EmployeeID], 
			tep.ProjectID AS [ProjectID]
	FROM #TempEmployeeProjects tep